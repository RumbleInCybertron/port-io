datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Portfolio {
  id           String        @id @default(cuid())
  name         String
  ttl_value    Float
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  stockAssets  StockAsset[]
  cryptoAssets CryptoAsset[]
  Fiat         Fiat?
}

model Crypto {
  id        String   @id @default(cuid())
  name      String
  ticker    String
  price     Float
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Stock {
  id        String   @id @default(cuid())
  name      String
  ticker    String
  index     String
  price     Float
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model CryptoAsset {
  id           String        @id @default(cuid())
  name         String        @unique
  ticker       String
  transactions Transaction[]
  amount       Float
  average      Float
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @updatedAt
  portfolio    Portfolio     @relation(fields: [portfolioId], references: [id])
  portfolioId  String
  profits      Profit[]
  losses       Loss[]
}

model StockAsset {
  id           String        @id @default(cuid())
  name         String        @unique
  ticker       String
  index        String
  transactions Transaction[]
  amount       Float
  average      Float
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @updatedAt
  portfolio    Portfolio     @relation(fields: [portfolioId], references: [id])
  portfolioId  String
  profits      Profit[]
  losses       Loss[]
}

model Transaction {
  id            String       @id @default(cuid())
  price         Float
  units         Float
  type          String
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  CryptoAsset   CryptoAsset? @relation(fields: [cryptoAssetId], references: [id])
  cryptoAssetId String?
  StockAsset    StockAsset?  @relation(fields: [stockAssetId], references: [id])
  stockAssetId  String?
}

model Profit {
  id            String       @id @default(cuid())
  amount        Float
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  CryptoAsset   CryptoAsset? @relation(fields: [cryptoAssetId], references: [id])
  cryptoAssetId String?
  StockAsset    StockAsset?  @relation(fields: [stockAssetId], references: [id])
  stockAssetId  String?
}

model Loss {
  id            String       @id @default(cuid())
  amount        Float
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  CryptoAsset   CryptoAsset? @relation(fields: [cryptoAssetId], references: [id])
  cryptoAssetId String?
  StockAsset    StockAsset?  @relation(fields: [stockAssetId], references: [id])
  stockAssetId  String?
}

model Fiat {
  id          String    @id @default(cuid())
  amount      Float
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String    @unique
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  password      String
  image         String?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  emailVerified DateTime?   @map("email_verified")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
